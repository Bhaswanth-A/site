I"„R<h1 id="introduction">Introduction</h1>

<h2 id="pre-requesites">Pre Requesites</h2>

<ul>
  <li>Pointers</li>
  <li>Functions</li>
  <li>Scope of variables</li>
  <li>Fundamentals of Arduino</li>
</ul>

<h2 id="a-brief-outline">A BRIEF OUTLINE</h2>

<ul>
  <li>Structures and Classes</li>
  <li>Inheritance</li>
  <li>Interrupts</li>
  <li>Stepper</li>
  <li>Encoders</li>
</ul>

<hr />

<h2 id="structures">Structures</h2>

<ul>
  <li>A collection of objects with heterogeneous data types.</li>
  <li>Convenient tool for handling logically related data items.</li>
</ul>

<pre><code class="language-C++">// format
struct tag_name{
    &lt;type&gt; member1;
    &lt;type&gt; member2;
        . . .
        . . .
};  // Always put semicolon don't forget!

// Use struct keyword for creating a structure
struct Book{
    char *title;
    char *author;
    int totalPages;
    float prices;
};
</code></pre>

<p><em>Syntax is expressed through convention.
&lt;&gt;: have relevant placeholders, eg: &lt; type &gt;</em></p>

<p><a href=":/ed8b8ab20b504e829ca18c213321013a">Structures.mkv</a></p>

<p>Reference: https://www.geeksforgeeks.org/structures-c/</p>

<h2 id="accesing-members">Accesing Members</h2>

<ul>
  <li>All members of structure can be accessed by ‚Äò.‚Äô member access operator.</li>
  <li>Two variables of same structure type can be copied the same way as ordinary variables.</li>
  <li>Cannot perform logical operations on structure variables.</li>
</ul>

<pre><code class="language-C++">struct Person{
    char *nickName;
    float age;
};

// Declaring struct Person var
struct Person p1;

// &lt;struct var&gt;.&lt;member&gt;
p1.nickName = "CyberPunk";
p1.age = 0.2;

</code></pre>

<p><em>Syntax is expressed through convention.
&lt;&gt;: have relevant placeholders, eg: &lt; struct var &gt;</em>
You can tinker with this example : <a href="https://www.tinkercad.com/things/3fPB5EhmNgr">Tinkercad</a></p>

<p>HW :- Is there a way to have a function as a member of a structure?</p>

<h2 id="object-oriented-programming">Object Oriented Programming</h2>

<ul>
  <li>In this we assume a real world entity as a set of features and these features are represented using data types and functions. We define them under something called as a class.</li>
  <li>In formal sense, OOP is a type of programming in which we define type of data structures and also types of operations that can be applied to data structure.</li>
</ul>

<p>Reference: https://www.geeksforgeeks.org/c-classes-and-objects/</p>

<h2 id="classes">Classes</h2>

<ul>
  <li>Classes are a form of containerization of data. The idea behind classes is to abstract and encapsulate data and show the user only the information relevant to them.</li>
  <li>Classes are the template and objects are individual entities from the same template.</li>
</ul>

<p>Consider an analogy -
A car is a class and there are several different cars of different brands,
Example - Honda civic, Swift desire.</p>

<pre><code class="language-C++">// Use class keyword to create a class
class Car{
    
    // Access specifier
    private:
    // Data members
        int locX;
        int locY;
        float speed;
    
    // Member functions
        void getSpeed(){
            // Some defination
        }
}; // Always put semicolon, don't forget!
</code></pre>

<p>This is an example on how to create a class-</p>

<ul>
  <li>When we define class only specifications of an object are defined and no memory is allocated.</li>
  <li>Member functions of class are called methods.</li>
  <li>By default access specifier to members is private and can be accessed only through methods.</li>
</ul>

<p>You can tinker with this example : <a href="https://www.tinkercad.com/things/69JAbTfPcMW">TinkerCAD</a></p>

<p><a href=":/ea2330772f5b4acb897be2f21aa8aa33">Classes.mkv</a></p>

<p>HW - Find the differences between Structures and Classes.</p>

<h2 id="class-methods">Class Methods</h2>

<ul>
  <li>Methods are used to achieve data abstraction and encapsulation.</li>
  <li>Methods are just like any other functions except that they are used with class.</li>
  <li>They define the properties and behaviour of objects in a Class.</li>
</ul>

<pre><code class="language-C++">class Point{
    // By default private
        int x;
        int y;
    
    int getX(){
        return x;
    }
    int getY(){
        return y;
    }
};
</code></pre>

<p><em>Since x and y are private, the only way you can get the values stored in x, y is by using methods getX() and getY().</em></p>

<h2 id="constructors">Constructors</h2>

<ul>
  <li>A constructor is a special class method.</li>
  <li>A constructor initializes the initial values for the object‚Äôs attributes.</li>
  <li>Constructors are just like any other class methods but it cannot return a value.</li>
  <li>You‚Äôll learn more about ‚Äúthis‚Äù keyword in the next slide.</li>
</ul>

<pre><code class="language-C++">class Point{
    
    // By default private
    int x;
    int y;
    
    public:
    // Constructor
    Point(int x,int y){
        this-&gt;x = x;
        this-&gt;y = y;
    }
    
    int getX(){
        return this-&gt;x;
    }
    
    int getY(){
        return this-&gt;y;
    }
};
</code></pre>

<h2 id="objects">Objects</h2>

<ul>
  <li>Objects are like variables of data type class. We can use attributes of class with the help of</li>
  <li>member access operator ‚Äò.‚Äô</li>
  <li>Objects are also called an instance of a class.</li>
  <li>‚Äúthis‚Äù keyword refers to the current instance of the class. (Can think of it as a pointer).</li>
  <li>In order to access a member using this keyword, we need to use the arrow operator ‚Äò-&gt;‚Äô.</li>
  <li>An object is initialized in a similar fashion as variables.</li>
</ul>

<pre><code class="language-C++">class Point{
    
    // By default private
    int x;
    int y;
    
    public:
    // Constructor
    Point(int x,int y){
        this-&gt;x = x;
        this-&gt;y = y;
    }
    
    int getX(){
        return this-&gt;x;
    }
    
    int getY(){
        return this-&gt;y;
    }
};

// Creating an object
Point p1(10,20);
int myCoordinateX = p1.getX();
int myCoordinateY = p1.getY();
</code></pre>

<p><em>In the above example, we create an instance of a class Point as p1 by passing the necessary arguments in the constructor.</em></p>

<h2 id="inheritance">Inheritance</h2>

<p>The capability of a class to derive properties and characteristics from another class is called Inheritance.</p>

<ul>
  <li>
    <p>Child Class/Sub Class :-
  The class that inherits properties from another class.</p>
  </li>
  <li>
    <p>Parent Class/Super Class :-
  The class whose properties are inherited by subclass.</p>

    <p><img src=":/df5e71f1154a4d1e8f6201aaa1760e5b" alt="e05df71a3adfd8aefc943f0e6af1e126.png" /></p>
  </li>
  <li>
    <p>The visibility mode specifies whether the features of the base class are publicly inherited or privately inherited.</p>
  </li>
  <li>
    <p>Default mode of visibility is private. The private members of the base class are never inherited.</p>
  </li>
  <li>
    <p>In the given example - Dog inherits properties from Animal class.</p>
  </li>
</ul>

<pre><code class="language-C++">// Syntax for derived class from base class
class &lt;sub class&gt; : &lt;visibility&gt; &lt;base class&gt;

// Example - 
class Animal{
    public:
    void eat(){
        // Some defination
    }
};

class Dog : public Animal{
    public:
    void bark(){
        // Some defination
    }
};

Dog d1; // Can access eat() too now

</code></pre>

<p>Types of Inheritance :-</p>

<ul>
  <li>Single Inheritance</li>
  <li>Multiple Inheritance</li>
  <li>Multilevel Inheritance</li>
  <li>Hybrid Inheritance</li>
  <li>Hierarchial Inheritance</li>
</ul>

<h2 id="interrupts">Interrupts</h2>

<ul>
  <li>An interrupt is a signal that tells the processor to immediately stop what it is doing and handle some high priority processing.</li>
  <li>That high priority processing is called an Interrupt Service routine (ISR).</li>
</ul>

<pre><code class="language-C++">//syntax

attachInterrupt(&lt;InterruptPin&gt;,&lt;ISR&gt;,&lt;Mode&gt;);

// &lt;InterruptPinNo&gt; = digitalPinToInterrupt(pin);

</code></pre>

<p><em>Syntax is expressed through convention.
&lt;&gt;: have relevant placeholders, eg: &lt; ISR &gt;</em></p>

<p>Reference: https://youtu.be/9VZUb5cMrV0</p>

<h3 id="interrupt-service-routine">Interrupt Service Routine</h3>

<ul>
  <li>ISRs are special kinds of functions.</li>
  <li>An ISR cannot have any parameters and they shouldn‚Äôt return anything.</li>
  <li>They should as short and fast as possible.</li>
  <li>Typically volatile global variables are used to pass data between an ISR and the main program.</li>
</ul>

<pre><code class="language-C++">const int LED = 13;
const int InterruptPin = 2;
volatile int state = LOW;

void setup(){
    // Pin Configuration
    pinMode(LED,OUTPUT);
    pinMode(InterruptPin,INPUT_PULLUP);
    
    attachInterrupt(digitalPinToInterrupt(InterruptPin),blink,RISING);
}

void loop(){
    digitalWrite(LED,state);
}

void blink(){
    state = !state;
}

</code></pre>

<p>HW - In the given example, If you connect pushbutton in INPUT_PULLUP Mode, What will happen when you press it?</p>

<h2 id="stepper-motors">Stepper Motors</h2>

<p>A stepper motor is an electric motor whose main feature is that its shaft rotates by performing steps, that is, by moving by a fixed amount of degrees. This feature is obtained thanks to the internal structure of the motor, and allows to know the exact angular position of the shaft by simply counting how may steps have been performed, with no need for a sensor. This feature also makes it fit for a wide range of applications.</p>

<p><a href="https://youtu.be/CEz1EeDlpbs">Video on how to use a stepper motor</a></p>

<h3 id="stepper-motor-working-principles">Stepper Motor Working Principles</h3>

<ul>
  <li>Stationary part (the stator)</li>
  <li>Moving part (the rotor).</li>
</ul>

<p>On the stator, there are teeth on which coils are wired, while the rotor is either a permanent magnet or a variable reluctance iron core.</p>

<p>Figure 1 shows a drawing representing the section of the motor is shown, where the rotor is a variable-reluctance iron core.
<img src=":/90bfdea257c64fd79ab9c040d80ca12e" alt="03884a27c6f54ccc97f718d1fa6cd976.png" /></p>

<ul>
  <li><a href="https://youtu.be/VfqYN1eG9Zk">Video1</a></li>
  <li><a href="https://youtu.be/eyqwLiowZiU">Video2</a></li>
</ul>

<p>The basic working principle of the stepper motor is the following: By energizing one or more of the stator phases, a magnetic field is generated by the current flowing in the coil and the rotor aligns with this field. By supplying different phases in sequence, the rotor can be rotated by a specific amount to reach the desired final position. At the beginning, coil A is energized and the rotor is aligned with the magnetic field it produces. When coil B is energized, the rotor rotates clockwise by 60¬∞ to align with the new magnetic field. The same happens when coil C is energized. In the pictures, the colors of the stator teeth indicate the direction of the magnetic field generated by the stator winding.</p>

<p><img src=":/3eaf699dc10c4807b39c05466d8375e6" alt="95944375073ca4539f10bce3cb752e6c.png" /></p>

<h3 id="stepper-motor-driver-types">Stepper Motor Driver Types</h3>

<p>There are different stepper motor drivers available on the market, which showcase different features for specific applications. The most important characteristics include the input interface. The most common options are:</p>

<ul>
  <li>Step/Direction ‚Äì By sending a pulse on the Step pin, the driver changes its output such that the motor will perform a step, the direction of which is determined by the level on the Direction pin.</li>
  <li>Phase/Enable ‚Äì For each stator winding phase, Phase determines the current direction and triggers Enable if the phase is energized.</li>
  <li>PWM ‚Äì Directly controls the gate signals of the low-side and high-side FETs.</li>
</ul>

<p>Another important feature of a stepper motor driver is if it is only able to control the voltage across the
winding, or also the current flowing through it:</p>

<ul>
  <li>With voltage control, the driver only regulates the voltage across the winding. The torque developed and the speed with which the steps are executed only depend on motor and load characteristics.</li>
  <li>Current control regulate the current flowing through the active coil in order to have better control over the torque produced, and thus the dynamic behavior of the whole system.</li>
</ul>

<h3 id="stepper-motor-driving-techniques">Stepper Motor Driving Techniques</h3>

<p><a href="https://youtu.be/VMwv4XFZ2L0">Video on operational modes</a></p>

<p>In <strong>wave mode or full step mode</strong>, only one phase at a time is energized (see Figure11).</p>

<p><img src=":/b52474d7dff94725912d437c0ed6206d" alt="4f35e683357e3e62d42fd07f29b6ab6f.png" /></p>

<p>In <strong>half-step mode</strong>,</p>

<ul>
  <li>Two phases are always energized at the same time.</li>
  <li>With this mode, the motor is able to produce a higher torque since more current is flowing in the motor and a stronger magnetic field is generated.</li>
</ul>

<p><img src=":/b571d52108974434aa6a3a982e076379" alt="6e4c573143a8721807c3d450202f7d77.png" /></p>

<p><strong>Microstepping</strong>,</p>

<ul>
  <li>Allows to reduce even further the step size and to have a constant torque output.</li>
  <li>This is achieved by controlling the intensity of the current flowing in each phase.</li>
  <li>Helps reaching very high position resolution</li>
  <li>More complicated to control the motor, and a smaller torque generated with each step (the torque is proportional to the sine of the angle between the stator magnetic field and the rotor magnetic field)</li>
  <li>therefore, when the steps are smaller, the torque is smaller. This may lead to missing some steps, meaning the rotor position does not change even if the current in the stator winding has.</li>
</ul>

<p><img src=":/11e658640fb84277bb15ef9b1ae62143" alt="09691da31693a2caddcb8edbda081b21.png" /></p>

<h2 id="encoders">Encoders</h2>

<h3 id="what-is-an-encoder">What is an encoder?</h3>

<p>Simply put, an encoder is a sensing device that provides feedback. Encoders convert motion to an electrical signal that can be read by some type of control device in a motion control system, such as a counter or PLC. The encoder sends a feedback signal that can be used to determine position, count, speed, or direction. A control device can use this information to send a command for a particular function.</p>

<h3 id="how-does-an-encoder-work">How does an encoder work?</h3>

<p>Encoders use different types of technologies to create a signal, including: mechanical, magnetic, resistive and optical ‚Äì optical being the most common. In optical sensing, the encoder provides feedback based on the interruption of light. The graphic at right outlines the basic construction of an incremental rotary encoder using optical technology. A beam of light emitted from an LED passes through the Code Disk, which is patterned with opaque lines (much like the spokes on a bike wheel). As the encoder shaft rotates, the light beam from the LED is interrupted by the opaque lines on the Code Disk before being picked up by the Photodetector Assembly. This produces a pulse signal: light = on; no light = off. The signal is sent to the counter or controller, which will then send the signal to produce the desired function.</p>

<p><img src=":/34d75a96e6b540fcb459798f1caf7123" alt="4c823db3e983f50cbb6e92786365eded.png" /></p>

<p>Encoders use different types of technologies to create a signal. Some common encoder technologies are mechanical, magnetic, resistive, and optical. We can use encoders to either drive a dc motor with way more precision, use in linear actuators, or just use it as a potentiometer. There are two types of encoders classified based on their response to motion:</p>

<ul>
  <li>Linear encoder (commonly used in mills)</li>
  <li>Rotary encoder (used in motors)</li>
</ul>

<p><img src=":/1f89874ca28c42bcbdfb1601d1898ed5" alt="9ce3f40d08a6d8b80332458c36d12a4c.png" /> <img src=":/e931bfb816424569a31a46529198520d" alt="789c62f4f01e57588cd390b41db7d95a.png" /></p>

<p>Encoders are also classified based on differences in measurements:
¬∑ Incremental
¬∑ Absolute</p>

<p>We are taking rotary encoders into consideration.</p>

<ul>
  <li>
    <p><strong>Rotary incremental encoders</strong> have equally spaced uniform slots, they work by generating pulses during movement. There is a stationary pickup device minted nearby which picks up pulses so generated and passed through slots to give the relative angular position of the disc. They generally output square waves in two channels that differ from each other by 90 degrees. They help in determining whether it is rotating clockwise or counterclockwise.</p>
  </li>
  <li>
    <p><strong>Rotary absolute encoders</strong> also have a stationary pickup but have different slots at each angular position of the encoder disc, therefore, giving out absolute position, for this reason, encoders don‚Äôt lose track of positioning when there is no power. They are either single-turn or multi-turn. Single turn encoders are useful for short distances, which is opposite for multi-turn.</p>

    <p><img src=":/1041893cd5a94d798f2851e990f92eb0" alt="3cb5e2f4bfcc3a8b7e44ff33bc69dac8.png" /></p>
  </li>
</ul>

<h3 id="pinout-for-encoder-in-tinkercad">Pinout for Encoder in TinkerCAD</h3>

<p><img src=":/6700e0f7b46747fbaa253381152d9e30" alt="71dc8629489e9fa683e1baa1f262a2e5.png" />
<img src=":/9d9f98b1d31c4376b05f6ee72f0c6827" alt="60ab55c73c9e6d216de889e7d252b235.png" /></p>

<h3 id="using-dc-motor-with-encoder-in-tinkercad">Using DC Motor with Encoder in TinkerCAD</h3>

<p><img src=":/7b4d6afca263409ca2e8af14c0fa8ae6" alt="37105f52c645259a4699b83e23283d25.png" /></p>

<p>FOR MORE INFORMATION ON ENCODERS:
<a href="https://youtu.be/V1txmR8GXzE">How to code for an encoder Motor?</a>
<a href="https://dronebotworkshop.com/rotary-encoders-arduino/">The link to the above video‚Äôs website.</a>
<a href="https://youtu.be/oLBYHbLO8W0">Here is another good explanation.</a></p>

<h2 id="3d-drafting">3D Drafting</h2>

<p>You are expected to watch the following videos, and practice a few questions.</p>

<ol>
  <li>
    <table>
      <tbody>
        <tr>
          <td>[Let‚Äôs Make an Assembly</td>
          <td>Tech Tip](https://www.youtube.com/watch?v=ym9FeU9i8As&amp;feature=youtu.be)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li><a href="https://www.youtube.com/watch?v=9FldXk8r8BQ&amp;feature=youtu.be">OnShape Assemblies - Basic Assembly</a></li>
  <li><a href="https://www.youtube.com/watch?v=zVpHQUG2NsE&amp;feature=youtu.be">OnShape Assemblies: Creating Mate Connectors</a></li>
  <li><a href="https://www.youtube.com/watch?v=db5OFEoddRg&amp;feature=youtu.be">OnShape Assemblies - Intermediate Assemblies</a> (optional)</li>
</ol>

<hr />

<h1 id="assignments">Assignments</h1>

<h2 id="assignment-1">Assignment 1</h2>

<p>Simulate on TinkerCad - A circuit with a DC motor with an encoder, whose RPM can be controlled by potentiometer. It should display RPM of the motor on serial monitor at every interval of 100 ms. Assume that the motor is connected to a wheel. Also use a push button to display the distance travelled by this wheel from time when you start simulation of the code, till the point when the button is pressed.
Specifications -
MAX RPM - 60 rpm (not accurate)
Radius of wheel - 10 cm
Use 12V to run the motor</p>

<h2 id="assignment-2">Assignment 2</h2>

<p>Task :- Make a 4 wheeled bot like shown and conduct motion study.
<img src=":/a4845859686d4f358e626af5a042fe50" alt="8a3894bde115127962e82d152d35a0cd.png" /> <img src=":/51f6b8f561fc48d6aaccc10a31052482" alt="227374e141526b9ff7050370f5b8d66d.png" /></p>

<p>This week you have to use your creativity for the part designing , but emphasis will be on the assembly and the type of mates being used.
Guidelines for Parts :-
(i) The dimensions of these parts are available online and you can use the specified dimensions. But no marks will be given for this. It is just to make your task simpler.</p>

<p>Guidelines for Assembly :-
(i) Make sure mates are realistic. Eg: A wheel mounted onto the bot should be capable of rotation.
(ii) Make sure dimensions are appropriate. Eg: The wheel should have proper dimensions to fit onto the shaft it‚Äôs being mounted on. Other dimensions like length of chassis or diameter of wheel are left to your discretion.</p>

<p>Guidelines for Motion Study :-
(i) Give the same rpm to all motors and show the wheels spinning.
(ii) People using Fusion show an animation of the wheels spinning.</p>

<p>Guidelines for submission :-
(i) Use .sldasm and .sldprt file format for the files and include a video recording of the animation not longer than 10 sec.
(ii) Use native Fusion 360 format .f3d format and include a video recording of the animation not longer than 10 sec. (NO NEED to convert into .iges/.igs formats)</p>
:ET