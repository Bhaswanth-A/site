I"šF<style>
  img {
  border-radius: 8px;
}
</style>

<h2 id="basic-electronic-components">Basic Electronic Components</h2>
<p>To get a brief overview of the section please watch the following video</p>

<p><code class="language-plaintext warning highlighter-rouge">important</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/ctC9UKJOJCs?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h3 id="led">LED</h3>
<ul>
  <li>PN Junction diode that emits light.</li>
  <li>Longer end is the anode (positive) and shorter end is cathode (negative)</li>
  <li>Usually Red Wire is connected to positive terminal and Black wire is connected to negative terminal.</li>
  <li>Voltage requirements : 1.2-3.6V</li>
</ul>

<p><img src="/site/assets/images/resources/Level 1/led.png" alt="LED" width="auto" height="auto" /></p>

<p><code class="language-plaintext info highlighter-rouge">Reference</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/9uHZB7-T_XA?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h3 id="breadboard">Breadboard</h3>
<ul>
  <li>The place where you will be making all your connections.</li>
  <li>The holes of the breadboard are interconnected in a specific fashion which can be seen below :</li>
</ul>

<p><img src="/site/assets/images/resources/Level 1/breadboard.png" alt="Breadboard" width="auto" height="auto" /></p>

<p><code class="language-plaintext info highlighter-rouge">Reference</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/nPOKOi1jIK0?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h3 id="jumper-cables">Jumper Cables</h3>
<ul>
  <li>To make connections on the breadboard we use jumper cables.</li>
  <li>We have male to male and male to female connectors.</li>
</ul>

<div class="swiper swiper-demo">
  <div class="swiper__wrapper">
    <div class="swiper__slide"><img class="image image" src="/site/assets/images/resources/Level 1/jumper1.png" /></div>
    <div class="swiper__slide"><img class="image image" src="/site/assets/images/resources/Level 1/jumper2.png" /></div>
  </div>
  <div class="swiper__button swiper__button--prev fas fa-chevron-left"></div>
  <div class="swiper__button swiper__button--next fas fa-chevron-right"></div>
</div>

<style>
.swiper-demo {
  height: auto;
}
</style>

<script>(function() {
  var SOURCES = window.TEXT_VARIABLES.sources;
  window.Lazyload.js(SOURCES.jquery, function() {
    function swiper(options) {
      var $window = $(window), $root = this, $swiperWrapper, $swiperSlides, $swiperButtonPrev, $swiperButtonNext,
        initialSlide, animation, onChange, onChangeEnd,
        rootWidth, count, preIndex, curIndex, translateX, CRITICAL_ANGLE = Math.PI / 3;

      function setOptions(options) {
        var _options = options || {};
        initialSlide = _options.initialSlide || 0;
        animation = _options.animation === undefined && true;
        onChange = onChange || _options.onChange;
        onChangeEnd = onChangeEnd || _options.onChangeEnd;
      }

      function init() {
        $swiperWrapper = $root.find('.swiper__wrapper');
        $swiperSlides = $root.find('.swiper__slide');
        $swiperButtonPrev = $root.find('.swiper__button--prev');
        $swiperButtonNext = $root.find('.swiper__button--next');
        animation && $swiperWrapper.addClass('swiper__wrapper--animation');
        calc(true);
      }

      function preCalc() {
        rootWidth = $root.width();
        count = $swiperWrapper.children('.swiper__slide').length;
        if (count < 2) {
          $swiperButtonPrev.addClass('d-none');
          $swiperButtonNext.addClass('d-none');
        }
        curIndex = initialSlide || 0;
        translateX = getTranslateXFromCurIndex();
      }

      var calc = (function() {
        var preAnimation, $swiperSlide, $preSwiperSlide;
        return function (needPreCalc, params) {
          needPreCalc && preCalc();
          var _animation = (params && params.animation !== undefined) ? params.animation : animation;
          if (preAnimation === undefined || preAnimation !== _animation) {
            preAnimation = _animation ? $swiperWrapper.addClass('swiper__wrapper--animation') :
              $swiperWrapper.removeClass('swiper__wrapper--animation');
          }
          if (preIndex !== curIndex) {
            ($preSwiperSlide = $swiperSlides.eq(preIndex)).removeClass('active');
            ($swiperSlide = $swiperSlides.eq(curIndex)).addClass('active');
            onChange && onChange(curIndex, $swiperSlides.eq(curIndex), $swiperSlide, $preSwiperSlide);
            if (onChangeEnd) {
              if (_animation) {
                setTimeout(function() {
                  onChangeEnd(curIndex, $swiperSlides.eq(curIndex), $swiperSlide, $preSwiperSlide);
                }, 400);
              } else {
                onChangeEnd(curIndex, $swiperSlides.eq(curIndex), $swiperSlide, $preSwiperSlide);
              }
            }
            preIndex = curIndex;
          }
          $swiperWrapper.css('transform', 'translate(' + translateX + 'px, 0)');
          if (count > 1) {
            if (curIndex <= 0) {
              $swiperButtonPrev.addClass('disabled');
            } else {
              $swiperButtonPrev.removeClass('disabled');
            }
            if (curIndex >= count - 1) {
              $swiperButtonNext.addClass('disabled');
            } else {
              $swiperButtonNext.removeClass('disabled');
            }
          }
        };
      })();

      function getTranslateXFromCurIndex() {
        return curIndex <= 0 ? 0 : - rootWidth * curIndex;
      }

      function moveToIndex(index ,params) {
        preIndex = curIndex;
        curIndex = index;
        translateX = getTranslateXFromCurIndex();
        calc(false, params);
      }

      function move(type) {
        var nextIndex = curIndex, unstableTranslateX;
        if (type === 'prev') {
          nextIndex > 0 && nextIndex--;
        } else if (type === 'next') {
          nextIndex < count - 1 && nextIndex++;
        }
        if (type === 'cur') {
          moveToIndex(curIndex, { animation: true });
          return;
        }
        unstableTranslateX = translateX % rootWidth !== 0;
        if (nextIndex !== curIndex || unstableTranslateX) {
          unstableTranslateX ? moveToIndex(nextIndex, { animation: true }) : moveToIndex(nextIndex);
        }
      }

      setOptions(options);
      init();
      preIndex = curIndex;

      $swiperButtonPrev.on('click', function(e) {
        e.stopPropagation();
        move('prev');
      });
      $swiperButtonNext.on('click', function(e) {
        e.stopPropagation();
        move('next');
      });
      $window.on('resize', function() {
        calc(true, { animation: false });
      });

      (function() {
        var pageX, pageY, velocityX, preTranslateX = translateX, timeStamp, touching;
        function handleTouchstart(e) {
          var point = e.touches ? e.touches[0] : e;
          pageX = point.pageX;
          pageY = point.pageY;
          velocityX = 0;
          preTranslateX = translateX;
        }
        function handleTouchmove(e) {
          if (e.touches && e.touches.length > 1) {
            return;
          }
          var point = e.touches ? e.touches[0] : e;
          var deltaX = point.pageX - pageX;
          var deltaY = point.pageY - pageY;
          velocityX = deltaX / (e.timeStamp - timeStamp);
          timeStamp = e.timeStamp;
          if (e.cancelable && Math.abs(Math.atan(deltaY / deltaX)) < CRITICAL_ANGLE) {
            touching = true;
            translateX += deltaX;
            calc(false, { animation: false });
          }
          pageX = point.pageX;
          pageY = point.pageY;
        }
        function handleTouchend() {
          touching = false;
          var deltaX = translateX - preTranslateX;
          var distance = deltaX + velocityX * rootWidth;
          if (Math.abs(distance) > rootWidth / 2) {
            distance > 0 ? move('prev') : move('next');
          } else {
            move('cur');
          }
        }
        $swiperWrapper.on('touchstart', handleTouchstart);
        $swiperWrapper.on('touchmove', handleTouchmove);
        $swiperWrapper.on('touchend', handleTouchend);
        $swiperWrapper.on('touchcancel', handleTouchend);

        (function() {
          var pressing = false, moved = false;
          $swiperWrapper.on('mousedown', function(e) {
            pressing = true; handleTouchstart(e);
          });
          $swiperWrapper.on('mousemove', function(e) {
            pressing && (e.preventDefault(), moved = true, handleTouchmove(e));
          });
          $swiperWrapper.on('mouseup', function(e) {
            pressing && (pressing = false, handleTouchend(e));
          });
          $swiperWrapper.on('mouseleave', function(e) {
            pressing && (pressing = false, handleTouchend(e));
          });
          $swiperWrapper.on('click', function(e) {
            moved && (e.stopPropagation(), moved = false);
          });
        })();

        $root.on('touchmove', function(e) {
          if (e.cancelable & touching) {
            e.preventDefault();
          }
        });
      })();

      return {
        setOptions: setOptions,
        previous: function(){
          move('prev');
        },
        next: function(){
          move('next');
        },
        refresh: function() {
          calc(true, { animation: false });
        }
      };
    }
    $.fn.swiper = swiper;
  });
})();
var SOURCES = window.TEXT_VARIABLES.sources;
window.Lazyload.js(SOURCES.jquery, function() {
  $('.swiper-demo').swiper();
});
</script>

<h3 id="resistor">Resistor</h3>
<ul>
  <li>A resistor is a passive two-terminal electrical component that implements electrical resistance as a circuit element.</li>
</ul>

<p><img src="/site/assets/images/resources/Level 1/resistor.png" alt="Resistor" width="auto" height="auto" /></p>

<p><code class="language-plaintext warning highlighter-rouge">Important</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/Ve7X6uPS2ug?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h2 id="basic-programming-fundamentals">Basic Programming Fundamentals</h2>

<p><code class="language-plaintext info highlighter-rouge">Reference</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/rTuKKVcYeMg?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h3 id="data-types">Data Types</h3>
<p>In programming a data type is simply an attribute of data which tells the compiler or interpreter how the programmer intends to use data.</p>

<ul>
  <li>int - stores integer values.</li>
  <li>float - stores fractional values.</li>
  <li>double - same as float but higher precision.</li>
  <li>char - stores characterâ€™s ASCII Value.</li>
  <li>bool - holds either true or false value</li>
</ul>

<p><img src="/site/assets/images/resources/Level 1/size.png" alt="Data Types" width="auto" height="auto" /></p>

<h3 id="variables">Variables</h3>
<p>In programming, a variable is a storage location associated with a name and is used to store value of a data type.
The syntax for declaring variable is as follows:
<code class="language-plaintext highlighter-rouge">data-type v1;</code>
 where v1 is the name of variable.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">A</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">B</span> <span class="o">=</span> <span class="mf">6.9</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">C</span> <span class="o">=</span> <span class="mf">7.23789</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">D</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">E</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>
<span class="n">String</span> <span class="n">F</span> <span class="o">=</span> <span class="s">"ARC is Love"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="operators">Operators</h3>
<p>An operator in a programming language is a symbol that tells the compiler or interpreter to perform a specific mathematical, relational, or logical operation and produce final result.</p>

<p>Different types of operators</p>
<ul>
  <li>Arithmetic operators</li>
  <li>Logical Operators</li>
  <li>Relational Operators</li>
</ul>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">12</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span><span class="mi">5</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// c = 17</span>
<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// d = 7</span>
<span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// e = 60</span>
<span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// f = 2</span>
<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span> <span class="c1">// g = 2 (Remainder)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><img src="/site/assets/images/resources/Level 1/operator.png" alt="Tables" width="auto" height="auto" /></p>

<h2 id="basics-of-arduino-programming">Basics of Arduino Programming</h2>

<p><code class="language-plaintext warning highlighter-rouge">Important</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/NeILwXOaECc?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h3 id="hello-world">Hello World</h3>
<p>Youâ€™re going to learn how to use Serial Monitor and Display a simple message on it.
The code on TinkerCAD will look something similar to this-</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Welcome to Level Up by ARC"</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">(){</span>
	<span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span> <span class="c1">// Setup serial monitor with a baud rate of 9600 bits per second</span>
	
	<span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">message</span><span class="p">);</span> <span class="c1">// Print message onto the serial monitor</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Syntax -
<strong>Serial.println(val, format)</strong></p>
<ul>
  <li>val : Value to print
val can be any data type</li>
  <li>format : Specifies base(for int type)
or number of decimal places
(for floating point type)</li>
</ul>

<p><code class="language-plaintext info highlighter-rouge">Reference</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/b5kndEtAKl8?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<h2 id="assignments">Assignments</h2>
<ol>
  <li>Print your intro on the Serial Monitor.</li>
  <li>Swap the last two numbers of your ID. (Donâ€™t Hardcode swapped numbers).</li>
  <li>An H-bridge is an electronic circuit that switches the polarity of a voltage applied to a load. These circuits are often used in robotics and other applications to allow DC motors to run forwards or backwards. Now you have to use 2 LEDs. 1st LED should glow in one configuration &amp; 2nd LED should glow in other configuration of the H-bridge.</li>
</ol>

<p><img src="/site/assets/images/resources/Level 1/hbridge.png" alt="H-Bridge" height="500" /></p>

<p><code class="language-plaintext info highlighter-rouge">Reference</code></p>
<div><div class="extensions extensions--video">
  <iframe src="https://www.youtube.com/embed/xSnbx5Nzn5E?rel=0&amp;showinfo=0" frameborder="0" scrolling="no" allowfullscreen=""></iframe>
</div>
</div>

<!-- <iframe width="725" height="453" src="https://www.tinkercad.com/embed/157BhnP4Po6?editbtn=1" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> -->

:ET