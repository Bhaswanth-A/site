I"%Ç<style>
  img {
  border-radius: 8px;
}
</style>

<h1 id="introduction">Introduction</h1>

<p>Hello! Congratulations on making it to Day 3 of the workshop. In this session, you will be learning about the various sensors present in your kit and how they can be interfaced with the Arduino Uno.</p>

<h1 id="motors-and-motor-drivers">Motors and Motor Drivers</h1>

<h2 id="about">About</h2>

<p>In everyday life, we see rotating devices like a drill, wheels in a vehicle, and a fan that make our tasks easier because their ability to ‚Äúturn‚Äù helps in these cases. But what is the cause that drives them to turn? Well, this cannot be the sole job of electrical or manual work but is a combined effort of certain laws that lead to an electric motor‚Äôs principle.</p>

<h2 id="electric-motor">Electric Motor</h2>

<p>Energy transformation is the basic principle of an electric motor, and it is pretty evident that in this case, it is from electrical energy to the energy that leads to the motion of a rotor which indeed is mechanical. But what is the cause of the rotation? There has to be a force responsible for this turning effect known as torque. Here, the interrelation between electric current and magnetism helps. It is a known fact that a current-carrying conductor experiences a force in a magnetic field and when it is a conducting loop, it experiences a torque! So torque of a motor is indeed an important factor for selecting a motor for our purpose.</p>

<h3 id="components-of-an-electric-motor">Components of an Electric Motor</h3>

<p>The basic parts include:</p>

<ul>
  <li>Rotor</li>
  <li>Stator</li>
  <li>Brush</li>
  <li>Commutator</li>
  <li>Armature</li>
</ul>

<p><img src=":/74b06cf920ba4509b63a2f6966c3de6c" alt="d5a83a1d55285b35080791825460a797.png" /></p>

<h3 id="working">Working</h3>

<p><img src=":/993b3a2c36434e318a799365bc0a3dcf" alt="ea8a53af83a1ada6547e5ba5bb68ab99.png" /></p>

<p>It is essential to understand that providing power to a motor depends on its size and complexity. A smaller motor can be manually supplied power through a battery, whereas a larger motor, the ones that are used in industries and other high power-driven motors, requires a mechanism which, when energized, connects its terminals to the high power supply. This method of starting a motor is called a ‚Äúdirect on line starter method.‚Äù</p>

<p>Another fact about these motors is that they draw a huge amount of current to go to the full-speed state from the initial state (to overcome inertia). This leads to drawing a huge amount of starting current from the power supply (for higher starting voltage across the terminals), which may cause damage to the circuits. So ‚Äúadjustable speed-drives‚Äù and ‚Äúcurrent limiting resistors‚Äù are used to prevent problems to the circuits and the motor itself.</p>

<h3 id="types-of-control-in-a-system">Types of control in a system</h3>

<p>Now that we got a good idea about motors let us discuss the two control systems: open-loop and closed-loop systems.
The reason behind discussing these is to know about how control is established in various systems.</p>

<h4 id="1-open-loop-system">1) Open-loop system:</h4>

<p>‚óã This is used when the system under consideration is not complex and need not require that much supervision for its working‚Äîfor example, the lighting in your room, we just turn the lights on, but we do not ensure if it is working with the same brightness for every time interval. The same is the case with ordinary DC Motor; there is no special mechanism to ensure if it is maintaining a constant rpm or torque for every time interval. If it is fine, it works, else it undergoes certain problems.</p>

<p><img src=":/6040b7a8bf15470c809372381c9675f7" alt="8bf9133a70ca89861500edbeb32f07c4.png" /></p>

<p>The above picture shows an open-loop system.
‚óè Commanded variable: The output that you desire.
‚óè Controller: Arduino or any other controller
‚óè Actuator: The device which actually does the process or which enables other devices to work on the process
‚óè Process: The task which we want to perform(here, rotation of the motor)
‚óè Controlled variable: The Actual result/output the we get</p>

<h4 id="2-closed-loop-system">2) Closed-loop system:</h4>

<p>‚óã It is clear that in an open-loop schematic, there can be a deviation of the ‚Äúcontrolled variable‚Äù from the ‚Äúcommanded variable‚Äù called the ‚Äúerror variable‚Äù. This error can cause undesirable consequences when working on huge projects. Here comes the closed-loop system. The special feature of this is that there is a feedback mechanism with the help of sensors that lets the controller know about the situation of the controlled variable with which we can measure the error factor and make our output as desirable as possible.</p>

<p><img src=":/d53b510ceb5b4c59809e5349158e72c4" alt="fccde530fa99d50dad765023420f1289.png" /></p>

<h3 id="other-types-of-motors">Other types of Motors</h3>

<h4 id="1-servo-motor">1) Servo Motor</h4>

<ul>
  <li>
    <p>This motor follows a closed-loop system. So it has got the advantage of precision. This motor provides high torque along with the precise position of the shaft, which gives its feedback control.</p>

    <p><img src=":/f8a6a691e4c04b77bb912ae1f25606a1" alt="25f95a3fe2c3f5ab7dd6a19f62ff6a4e.png" /></p>
  </li>
  <li>
    <p>The above is the schematic of the servo motor. It is to be noted that input is given to it in the form of PWM signals (pulse-width modulation) which leads to the position control of the motor (Of Course, digital signals also can be used for its position control). Also the position sensors in this closed-loop control are generally potentiometers.</p>
  </li>
  <li>
    <p>This is not all; servos can also be encoded depending on the complexity of the task that is involved making them gain access to speed and torque feedback along with regular position control. And here comes the actual problem of using these complex closed-loop systems when it is essential to perform the task but such skilled workers are not available. Skilled programmers are essential for optimizing the internal algorithms of closed-loop systems which is not an easy task.</p>
  </li>
</ul>

<p>So there is another type of motor that is in much use in the real world, the stepper motor.</p>

<h4 id="2-stepper-motor">2) Stepper Motor</h4>

<p>This motor utilizes an open-loop system.</p>

<ul>
  <li>
    <p>Stepper motors have a permanent magnetic rotating shaft called a rotor and stationary electromagnets surrounding the rotor called the stator.</p>

    <p><img src=":/d5466d3d1a4e4cdeb8e550dbd83a5fe0" alt="2b0b2134cfdc0211f4cc7c39ad58a44e.png" /></p>
  </li>
  <li>
    <p>Stepper motors have typically 50 to 100 electromagnet poles (pairs of north and south poles) generated either by a permanent magnet or an electric current.</p>
  </li>
  <li>
    <p>The greater the number of poles the more is the precision.</p>
  </li>
</ul>

<p>There are two main ways in which a stepper motor can be driven:</p>

<h5 id="full-step-mode">Full-step mode:</h5>

<p>The rotor turns through a bigger angle at once. This can be done by energizing either one or two phases( in general) at a time.</p>

<p><img src=":/e05b001904ad46d08c3a045a71c25570" alt="cbaf383f7acc70b03c452b239121dfda.png" /></p>

<p>It can be seen that the torque in two phase on mode is higher than that of one phase one mode.</p>

<h5 id="microstepping">Microstepping:</h5>

<p>This mode is essential when precision is an important factor in the process. In this case, the rotor is controlled by two phases such that the current in both of them is varied such that the magnetic field produced keeps varying with time, and so is the torque acting on the rotor. This is done such that the rotor moves through small angles( depending in the magnitude of the current and the way you vary it).</p>

<p><img src=":/0f229c4333f44f98b027299b562cd9fe" alt="0312d97deabd2b7a094cf389bdd51a87.png" /></p>

<p>In general, Servo Motors run more smoothly than a stepper motor except when micro stepping are used.</p>

<p>A Servo Motor will typically provide 2-3 times the speed of a typical stepper motor as the Servo Motor speed increases, the torque of the Servo Motor remains constant, thus performing better than a stepper motor at higher speeds usually above 1000 RPM</p>

<h2 id="h-bridge">H-Bridge</h2>

<p>The direction in which the motor rotates is expected to change depending on the situation and this cannot be always manually changed. Here comes the role of a H-Bridge which enables the change in direction of the motor by changing the state of the switches in its circuit which can be accomplished by logical HIGH or LOW to the respective switch.</p>

<p><img src=":/42fa0180e05c4e719432b04c46792bf8" alt="6afda33882f5ee958dd039887fb8a43f.png" /></p>

<p>It is evident from the above diagram about the way in which this works. When S1 and S4 are closed (S2 and S3 being open), the motor rotates in one direction while on closing S2 and S3 (keeping S1 and S4 open) the motor turns in the other direction.</p>

<p><img src=":/39b313f09a564ba0ba23b3f79539b6ba" alt="6f11d4eaa77d55c31c909f7b6db1beb7.png" /></p>

<p><img src=":/4a78442f787448c2a699ba5ef380bdb0" alt="952e16f8f3a999024d756525f17f1e33.png" /></p>

<p><img src=":/2a398cb196224487bf67aef550b2dfe2" alt="b497050cd1d2020343f7b20dbc330e23.png" /></p>

<p>This above diagram shows shorting of circuit which may lead to the burning of H-Bridge.</p>

<p>Also it is not advisable to drive the motor and change the direction at the same time.</p>

<p><img src=":/b72508511698420382868d0833f7e4ca" alt="1336d0fe41b30ec348ceb3f508a2f62a.png" /></p>

<h2 id="motor-driver">Motor Driver</h2>

<p>A motor driver at a basic level is an integrated circuit chip used to control a motor as per given instructions with the help of H Bridge topology in the case of the L293D.</p>

<p>Well, lets break this down and look into it closely one at a time.</p>

<h3 id="why-do-we-need-a-motor-driver">Why do we need a motor driver?</h3>

<ul>
  <li>In the world of autonomous technology, we would require efficient communication between microcontrollers like the arduino and a motor which draws a huge amount of current to work at the desired rate. Meanwhile, micro controllers operate on low level voltage/current (Eg: Arduino has an operating voltage of 5V).</li>
  <li>Thus, to bridge this gap of power output from the arduino to the motor, a motor driver can act as the interface taking in the low current signals from the Arduino and converting them into higher current signals which can help drive the motor as required.</li>
  <li>Thus, we can control the speed and direction of rotation of motor based on voltage provided.</li>
</ul>

<p><img src=":/f7c0815bfeaa40b9a4d1219fcc438eb0" alt="7a1bd70fd368fc900484e9e06630653a.png" /></p>

<h3 id="the-l293d-motor-driver">The L293D motor driver</h3>

<p>We will now specifically look into the L293D</p>

<p><img src=":/d8222e5eebba4060825a4b757ce053ee" alt="354cbd44e906f57738e52f8d9d273341.png" /></p>

<ul>
  <li>It is a commonly used and a popular 16 pin motor driver IC.</li>
  <li>It is capable of running 2 motors at the same time and works on the principle of a H Bridge.</li>
</ul>

<h4 id="working-principle">Working principle</h4>

<p>The IC works on the principle of H-Bridge (this can be understood on checking how the IC conveys signals to the motor).</p>

<p><img src=":/7cdc0f4b6a624c14b581ae6904f0c54b" alt="5837f19b0037384aa3c45cb27b8100a9.png" /></p>

<ul>
  <li>As we see, VCC2 is the pin that drives the motor at its required voltage and VCC1 is for charging the 16-pin IC which is connected to the Arduino 5V pin. One important point is that whenever there are any components in a project, we need to provide a common ground to them. Same is the case here, all the ground pins in the circuit are to be connected with the GND pin of the Arduino.</li>
  <li>It should also be noted that the enable pins are going to control the speed of the rotation through the PWM signals (Pulse width modulation) which can be established by connecting them to the PWM digital pins on Arduino.</li>
</ul>

<p><a href="https://components101.com/articles/what-is-motor-driver-h-bridge-topology-and-direction-control">Reference</a></p>

<h3 id="l293d-pin-description">L293D PIN DESCRIPTION</h3>

<p>The following image shows the pinout of the L293D.</p>

<p><img src=":/b6feabb8d34f486bb4d6f08baa14754a" alt="e7c4f7b824feddacd2c6115f80066e90.png" /></p>

<p>Understanding this is very crucial to facilitate its usage in the circuit.</p>

<table>
  <thead>
    <tr>
      <th>Pin Number</th>
      <th>Pin Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Enable 1,2</td>
      <td>This pin enables the input pin Input 1(2) and Input 2(7)</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Input 1</td>
      <td>Directly controls the Output 1 pin, Controlled by digital circuits</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Output 1</td>
      <td>Connected to one end of Motor 1</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Ground</td>
      <td>Ground pins are connected to ground of circuit (0V)</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Ground</td>
      <td>Ground pins are connected to ground of circuit (0V)</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Output 2</td>
      <td>Connected to another end of Motor 1</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Input 2</td>
      <td>Directly controls the Output 2 pin, Controlled by digital circuits</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Vcc2 (Vs)</td>
      <td>Connected to Voltage pin for running motors (4.5V to 36V)</td>
    </tr>
    <tr>
      <td>9</td>
      <td>Enable 3,4</td>
      <td>This pin enables the input pin Input 3(10) and Input 4(15)</td>
    </tr>
    <tr>
      <td>10</td>
      <td>Input 3</td>
      <td>Directly controls the Output 3 pin, Controlled by digital circuits</td>
    </tr>
    <tr>
      <td>11</td>
      <td>Output 3</td>
      <td>Connected to one end of Motor 2</td>
    </tr>
    <tr>
      <td>12</td>
      <td>Ground</td>
      <td>Ground pins are connected to ground of circuit (0V)</td>
    </tr>
    <tr>
      <td>13</td>
      <td>Ground</td>
      <td>Ground pins are connected to ground of circuit (0V)</td>
    </tr>
    <tr>
      <td>14</td>
      <td>Output 4</td>
      <td>Connected to another end of Motor 2</td>
    </tr>
    <tr>
      <td>15</td>
      <td>Input 4</td>
      <td>Directly controls the Output 4 pin, Controlled by digital circuits</td>
    </tr>
    <tr>
      <td>16</td>
      <td>Vcc2 (Vss)</td>
      <td>Connected to +5V to enable IC function</td>
    </tr>
  </tbody>
</table>

<p>Few points to be noted:</p>

<ul>
  <li>There is a notch on the top of the IC, to guide us with proper connections.</li>
  <li>Input pins: The ones to which we give signals</li>
  <li>Output pins: The ones connected to the motors.</li>
  <li>The enable pins are there to ‚Äúenable‚Äù the output pins. If enable pins are set to logic HIGH then the output pins match up to the input pins.</li>
  <li>If the enable pins are set to logic LOW then regardless of logic states of input pins, the output pins are always set to zero.</li>
</ul>

<p><a href="https://components101.com/ics/l293d-pinout-features-datasheet">Reference</a></p>

<p>You can also take a look at the <a href="https://components101.com/asset/sites/default/files/component_datasheet/L293D%20Datasheet.pdf">datasheet</a> of L293D for more information.</p>

<p>Now that we have a fair idea of the the L293D, lets use it in a circuit to grasp the complete picture</p>

<h3 id="using-l293d-with-motors-and-arduino">Using L293D with motors and Arduino</h3>

<p><em>Circuit on TinkerCAD</em></p>

<p><img src=":/1974be4b5cc24a2ebfa14946d0f2d193" alt="54066c866d3782bc831bb6f303d52a91.png" /></p>

<h4 id="code">Code</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">speedPinR</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// connect input pin 2 which controls output pin 2 </span>
<span class="kt">int</span> <span class="n">dirR1</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// connect input pin 1 which controls output pin 1</span>
<span class="kt">int</span> <span class="n">dirR2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// connect enable pin 1,2</span>
<span class="kt">int</span> <span class="n">speedPinL</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="c1">// connect enable pin 3,4</span>
<span class="kt">int</span> <span class="n">dirL1</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span> <span class="c1">// connect input pin 3 which controls output pin 3</span>
<span class="kt">int</span> <span class="n">dirL2</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span> <span class="c1">// connect input pin 4 which controls output pin 4</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">mSpeedL</span> <span class="o">=</span> <span class="mi">79</span><span class="p">;</span> <span class="c1">// to maintain approx 5000rpm for left wheel</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">mSpeedR</span> <span class="o">=</span> <span class="mi">79</span><span class="p">;</span> <span class="c1">// to maintain approx 5000rpm for right wheel</span>
<span class="kt">int</span> <span class="n">dt</span><span class="o">=</span><span class="mi">1000</span><span class="p">;</span> <span class="c1">// delay time</span>

<span class="c1">// Output pins 1,2 connected to right motor</span>
<span class="c1">// Output pins 3,4 connected to left motor</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
<span class="p">{</span> 
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span> 
    
<span class="c1">// set pinMode for all pins</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">speedPinR</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span> 
  <span class="n">pinMode</span><span class="p">(</span><span class="n">dirR1</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">dirR2</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">speedPinL</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">dirL1</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">dirL2</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">dirR1</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span> <span class="c1">// input pin 1 set to high</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">dirR2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span> <span class="c1">// enable pin 1,2 set to low</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="n">speedPinR</span><span class="p">,</span><span class="n">mSpeedR</span><span class="p">);</span> <span class="c1">// 5000rpm FOR RIGHT</span>
  
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">dirL1</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span> <span class="c1">// input pin 3 set to high</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">dirL2</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span> <span class="c1">// enable pin 3,4 set to low</span>
  <span class="n">analogWrite</span><span class="p">(</span><span class="n">speedPinL</span><span class="p">,</span><span class="n">mSpeedL</span><span class="p">);</span> <span class="c1">// 5000rpm FOR LEFT</span>
  
  <span class="n">delay</span><span class="p">(</span><span class="n">dt</span><span class="p">);</span> <span class="c1">// set delay time</span>
 <span class="p">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p><a href="https://www.tinkercad.com/things/l1ABNFeVqaz">TinkerCAD Simulation</a>
Refer to the above to get an idea on how to make the connections and how to work with the L293D.</p>

<p>Here is a very useful video by Paul MCWhorter. Do give it a watch!
https://www.youtube.com/watch?v=fPLEncYrl4Q</p>

<hr />

<h1 id="ultrasonic-sensor-hc-sr04">Ultrasonic Sensor HC-SR04</h1>

<h2 id="about-1">About</h2>

<p>The HC-SR04 ultrasonic sensor is used to calculate the distance of an obstacle in the path of the bot. It consists of four pins: VCC, trigger, echo &amp; ground. It also includes a transmitter and receiver, which transmit and receive the US signals, respectively.</p>

<p><img src=":/c4728e12bfa849c48681fc0852a191c8" alt="7b1973b8338cbbe46c5c617285987a93.png" /></p>

<h2 id="working-principle-1">Working Principle</h2>

<p>The HC-SR04 sensor detects the travel time of a signal from transmission till it‚Äôs received. The sensor sends out a ping, and an echo is heard. The duration of travel of the signal is then measured by the sensor.
When the Trig pin of the sensor receives a pulse of HIGH for at least 10 microseconds, it will initiate the sensor, which will transmit out 8 cycles of ultrasonic burst and wait for the reflected ultrasonic burst. When the sensor detects US signals from the receiver, it will set the Echo pin to HIGH and delay for a period proportional to distance.</p>

<p>The sensor transmits 8 cycles of ultrasonic bursts since the receiver needs to hear enough cycles to reach its full output and set the Echo pin to HIGH.</p>

<h2 id="pins-description">Pins Description</h2>

<ul>
  <li>VCC: This powers the sensor with +5V and is connected to the 5V supply of the Arduino.</li>
  <li>Trigger: It is an Input pin. It is connected to any digital pin on the Arduino. On sending a HIGH signal to this pin, the transmitter sends out US signals until a LOW signal is sent.</li>
  <li>Echo: It is an Output pin. It is connected to any digital pin on the Arduino. This pin goes HIGH for the duration equal to the time taken by the receiver to receive US signals after being transmitted.</li>
  <li>Ground: This pin is connected to the ground of the Arduino.</li>
</ul>

<p>The following image shows the connection of the terminals of the sensor to the Arduino:</p>

<p><img src=":/84df725c9a4d43febb6e0f21b6d8bd9e" alt="b908e1a6a6fbad9295989aeb7532a5cc.png" /></p>

<p><a href="https://components101.com/sensors/ultrasonic-sensor-working-pinout-datasheet">Reference</a>
You can also refer to the <a href="https://cdn.sparkfun.com/datasheets/Sensors/Proximity/HCSR04.pdf">datasheet</a> for more information.</p>

<h2 id="distance-calculation">Distance Calculation</h2>

<p>As described earlier, the HC-SR04 sensor sends out ultrasonic signals and receives the echo, then measures the pingTimeTravel of the signal.</p>

<p>We know, $Speed = Distance \hspace{0.1cm} / \hspace{0.1cm}Time$</p>

<p>Sound waves travel at a speed of about $340 m/s$ at room temperature.
$\therefore Speed = 340 m/s$</p>

<p>The time given by HC-SR04 is in microseconds. We need to divide the time by 2 since this is the time taken by the sound waves from the transmitter to the object back to the receiver.</p>

<p><img src=":/936c00d60bdc4375ae77e97e6176989e" alt="71c4a6dffbd3b47607a4211cbbb54482.png" /></p>

<p>Thus, the formula becomes,
$Distance = 340 * (pingTravelTime / 2)$</p>

<p>You can watch the following videos to understand better:</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=BTMMNsL0_b0">Measuring Speed of Sound With HC-SR04 Sensor</a></li>
  <li><a href="https://www.youtube.com/watch?v=2hwrDSVHQ-E">Measuring Distance With HC-SR04 Ultrasonic Sensor</a></li>
</ul>

<h2 id="code-1">Code</h2>

<p><img src=":/8b1917d33d51486ba3d5dbff9d4d590c" alt="e3c40a4fa40ff0c618304f822320f8ed.png" /></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">trigPin</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span> <span class="c1">// connect trig pin of HC-SR04</span>
<span class="kt">int</span> <span class="n">echoPin</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span> <span class="c1">// connect echo pin of HC-SR04</span>
<span class="kt">int</span> <span class="n">pingTravelTime</span><span class="p">;</span> <span class="c1">// initialize variable</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span><span class="n">OUTPUT</span><span class="p">);</span> <span class="c1">// trig pin set as OUTPUT</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">echoPin</span><span class="p">,</span><span class="n">INPUT</span><span class="p">);</span> <span class="c1">// echo pin set as INPUT</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="p">}</span>
 
<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>  
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span> <span class="c1">// trig pin set to low</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// delay time in microseconds</span>
    
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span> <span class="c1">// trig pin set to high</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// delay time in microseconds</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span><span class="n">LOW</span><span class="p">);</span> <span class="c1">// trig pin set to low</span>
    
    <span class="n">pingTravelTime</span> <span class="o">=</span> <span class="n">pulseIn</span><span class="p">(</span><span class="n">echoPin</span><span class="p">,</span><span class="n">HIGH</span><span class="p">);</span> <span class="c1">// pulseIn() function explained below</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">// delay time</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">pingTravelTime</span><span class="p">);</span> <span class="c1">// print pingTravelTime on Serial Monitor</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><a href="https://www.tinkercad.com/things/cGqyGisEibf">TinkerCAD Simulation</a></p>

<h2 id="pulsein-function">pulseIn() Function</h2>

<p>The pulseIn() function measures the time period of either HIGH or LOW pulse input signal.
The syntax of pulseIn() function is:
<code class="language-plaintext highlighter-rouge">pulseIn(pin, value)</code></p>

<ul>
  <li>pin: the number of the pin on which the pulse is to be read.</li>
  <li>value: the value of the pulse, either HIGH or LOW.</li>
</ul>

<p>In the above code, the pin is the echoPin, and the value is HIGH, i.e. the function measures the time period of the HIGH pulse input signal on the echoPin.</p>

<p>Hence it indirectly measures the travel time of the signal. Thus the pingTimeTravel can be calculated using the pulseIn() function.</p>

<p>https://www.youtube.com/watch?v=M-UKXCUI0rE</p>

<hr />

<h1 id="lm7805-voltage-regulator">LM7805 Voltage Regulator</h1>

<h2 id="about-2">About</h2>

<p>Voltage regulators are used to ensure steady and constant output from voltage sources. The integrated circuits used for voltage regulation are called Voltage regulator ICs.</p>

<p>IC 7805 is a three-terminal Voltage Regulator that restricts the output voltage to 5V output for various ranges of input voltage. It acts as an excellent component against input voltage fluctuations for circuits, and adds an additional safety to your circuitry. Primary job of a voltage regulator is to drop a larger voltage to a smaller one and keep it stable, since that regulated voltage is being used to power sensitive electronics.</p>

<p>LM78xx series is a family of linear voltage regulators. This series of regulators are excellent for most purposes, they can handle up to almost 30V on the input and depending on the package, up to 1A output current. The last digit on the IC signifies the voltage to which input is regulated and given out, for example, 7805 regulates to give 5V output and a 7803 gives a 3V output.</p>

<p><img src=":/de1ea50d53cd4d6487d3a41715589117" alt="Screenshot 2021-07-09 205346.jpg" /></p>

<h2 id="pins-description-1">Pins Description</h2>

<p><img src=":/54e09057956a4a3e80d4611fae7605a6" alt="download.jfif" /></p>

<table>
  <thead>
    <tr>
      <th>Pin No.</th>
      <th>Pin</th>
      <th>Function</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>INPUT</td>
      <td>Input Voltage (7V-35V)</td>
      <td>In this pin of the IC positive unregulated voltage is given in regulation</td>
    </tr>
    <tr>
      <td>2</td>
      <td>GROUND</td>
      <td>Ground(0V)</td>
      <td>In this pin where the ground is given. This pin is neutral for equally the input and output</td>
    </tr>
    <tr>
      <td>3</td>
      <td>OUTPUT</td>
      <td>regulated output; 5V(4.8V-5.2V)</td>
      <td>The output of the regulated 5V is taken out at this pin of the IC regulator</td>
    </tr>
  </tbody>
</table>

<p>You can read more about the 7805 IC <a href="https://www.electronicshub.org/understanding-7805-ic-voltage-regulator/">here</a>.
A detailed video explanation on the 7805 IC can be found <a href="https://www.youtube.com/watch?v=LEv26VH0S1E">here</a>.</p>

<p><img src=":/e19a91fbe59f4c23b1465e380e2979ce" alt="9651c16150980a9676f85d0a31735e3f.png" /></p>

<p><a href="https://www.tinkercad.com/things/cGUY894p0d4-lm7805-voltage-regulator">Tinkercad Simulation for Reference</a>
<a href="https://www.youtube.com/watch?v=9KXN69eXzj8">How to use LM7805 regulator in 5 volt dc power supply from 9 volt battery</a></p>

<h2 id="7805-regulator-features">7805 Regulator Features</h2>

<ul>
  <li>5V positive voltage regulator.</li>
  <li>Operating current is 5mA.</li>
  <li>Minimum input voltage is 7V.</li>
  <li>Maximum input voltage is 25V.</li>
  <li>Required very minimum external component to fully function.</li>
  <li>It can deliver up to 1.5A of current.</li>
  <li>Internal thermal overload and short circuit current limiting protection is available.</li>
  <li>Junction temperature maximum of 125-degree celsius.</li>
  <li>This IC has both internal current limiting and thermal shutdown features.</li>
</ul>

<p>You can also refer to the <a href="http://ee-classes.usc.edu/ee459/library/datasheets/LM7805.pdf">datasheet</a> for more information.</p>

<h2 id="application-of-lm7805">Application of LM7805</h2>

<h3 id="used-as">Used as</h3>

<ul>
  <li>fixed output regulator.</li>
  <li>regulated dual supply.</li>
  <li>In most devices as constant +5V output is needed for microcontrollers and sensors in most of the projects.</li>
  <li>current limiter for certain applications.</li>
  <li>polarity reversal protection circuit.</li>
  <li>Reverse bias protection circuit.</li>
  <li>positive regulator in negative configurations.</li>
</ul>

<hr />
:ET